

/*
 *      .o.       ooo        ooooo ooooooooo.             ooooooo  ooooo 
 *     .888.      `88.       .888' `888   `Y88.            `8888    d8'  
 *    .8"888.      888b     d'888   888   .d88'  .ooooo.     Y888..8P    
 *   .8' `888.     8 Y88. .P  888   888ooo88P'  d88' `88b     `8888'     
 *  .88ooo8888.    8  `888'   888   888`88b.    888ooo888    .8PY888.    
 * .8'     `888.   8    Y     888   888  `88b.  888    .o   d8'  `888b   
 *o88o     o8888o o8o        o888o o888o  o888o `Y8bod8P' o888o  o88888o 
 *
 */



#ifndef _EBCELLFAB_H_
#define _EBCELLFAB_H_

#include <cmath>
#include <cstdlib>
#include "AMReX_FArrayBox.H"
#include "AMReX_Box.H"
#include "AMReX_BaseIndex.H"
#include "AMReX_VolIndex.H"

namespace amrex
{
  ///
  /**
     EBCellFAB is a BaseEBCellFAB<Real>
     which includes arithmetic functions.
  */
  class EBCellFAB: public FArrayBox
  {
  public:
    static bool s_verbose;
    ///
    EBCellFAB(): FArrayBox()
    {
    }

    ///
    /**
       Box going into this needs to be cell-centered.
       Data will exist over the surrounding nodes of the box.
    */
    EBCellFAB(const Box& a_region, int a_nVar):
      FArrayBox(a_region, a_nVar)
    {
    }
    

    //for aggstencil
    virtual long offset(const BaseIndex& a_baseInd, const int a_ivar) const;

    ///
    virtual ~EBCellFAB()
    {
    }


    const Real& operator()(const VolIndex& a_ndin, int a_nvarLoc) const
    {
      const FArrayBox& fabcast = (FArrayBox&)(*this);
      return fabcast(a_ndin.gridIndex(),  a_nvarLoc);
    }


    Real& operator()(const VolIndex& a_ndin, int a_nvarLoc) 
    {
      FArrayBox& fabcast = (FArrayBox&)(*this);
      return fabcast(a_ndin.gridIndex(),  a_nvarLoc);
    }

  private:
    //disallowed for all the usual reasons
    EBCellFAB(const EBCellFAB& ebcin);

    void operator=(const EBCellFAB& fabin);


  };


}
#endif
