#!/bin/sh -f

# This script writes an F90 module containing strings with the build
# date, directory, machine, the list of modules that were compiled
# into the executable, and compilation lines.  This information can
# then be written to the plotfiles (in MAESTRO this is done in
# write_job_info.f90).
#
# To call it from the makefile, you would do something like:
#
# build_info.f90: 
#       $(BOXLIB_HOME)/Tools/F_scripts/make_build_info \
#            "$(Fmdirs)" "$(COMP)" "$(FCOMP_VERSION)" "$(COMPILE.f90)" "$(COMPILE.f)" \
#            "$(COMPILE.c)" "$(LINK.f90)" "$(BOXLIB_HOME)"
#
# where:
#
#  Fmdirs is a string containing the list of directories used to
#  assemble the code
#
#  COMP is the Fortran compiler name (as expected by BoxLib)
#
#  FCOMP_VERSION is the Fortran compiler version number, as returned by the
#     compiler itself (usually via -v)
#
#  COMPILE.f90 is a string giving the Fortran 90 compile line
#
#  COMPILE.f is a string giving the Fortran 77 compile line
#
#  COMPILE.c is a string giving the C compile line
#
#  LINK.f90 is a string giving the link line
#
#  BOXLIB_HOME is a string giving the path to the BoxLib directory


# the basic build strings will be MAX_STRING_LENGTH long
MAX_STRING_LENGTH=128

# long strings will carry over to a second line.  Set the length of a
# single line
DBL_STRING_LINE_LENGTH=125

# also set the starting and ending character positions for the second
# line
s2=`expr $DBL_STRING_LINE_LENGTH + 1`
f2=`expr $DBL_STRING_LINE_LENGTH + $DBL_STRING_LINE_LENGTH`

# finally set the total length of a long string
DBL_STRING_LENGTH=$f2


rm -f build_info.f90


BUILD_DATE=`date | cut -c 1-$MAX_STRING_LENGTH`
BUILD_DIR=`pwd | cut -c 1-$MAX_STRING_LENGTH`
BUILD_MACHINE=`uname -a | cut -c 1-$MAX_STRING_LENGTH`

MODULES1=`echo $1 | cut -c 1-$DBL_STRING_LINE_LENGTH`
MODULES2=`echo $1 | cut -c $s2-$f2`

FCOMP=`echo $2 | cut -c 1-$MAX_STRING_LENGTH`

FCOMP_VERSION=`echo $3 | cut -c 1-$MAX_STRING_LENGTH`

F90COMPILE1=`echo $4 | cut -c 1-$DBL_STRING_LINE_LENGTH`
F90COMPILE2=`echo $4 | cut -c $s2-$f2`

FCOMPILE1=`echo $5 | cut -c 1-$DBL_STRING_LINE_LENGTH`
FCOMPILE2=`echo $5 | cut -c $s2-$f2`

CCOMPILE1=`echo $6 | cut -c 1-$DBL_STRING_LINE_LENGTH`
CCOMPILE2=`echo $6 | cut -c $s2-$f2`

LINK1=`echo $7 | cut -c 1-$DBL_STRING_LINE_LENGTH`
LINK2=`echo $7 | cut -c $s2-$f2`

BOXLIB_DIR=`echo $8 | cut -c 1-$MAX_STRING_LENGTH`



cat > build_info.f90 << EOF
module build_info_module

  implicit none

  character (len=$MAX_STRING_LENGTH), save :: build_date = &
"$BUILD_DATE"

  character (len=$MAX_STRING_LENGTH), save :: build_dir = &
"$BUILD_DIR"

  character (len=$MAX_STRING_LENGTH), save :: build_machine = &
"$BUILD_MACHINE"

  character (len=$MAX_STRING_LENGTH), save :: boxlib_dir = &
"$BOXLIB_DIR"

  character (len=$DBL_STRING_LENGTH), save :: module_list = &
"$MODULES1" //&
"$MODULES2"

  character (len=$MAX_STRING_LENGTH), save :: FCOMP = &
"$FCOMP"

  character (len=$MAX_STRING_LENGTH), save :: FCOMP_version = &
"$FCOMP_VERSION"

  character (len=$DBL_STRING_LENGTH), save :: f90_compile_line = &
"$F90COMPILE1" //&
"$F90COMPILE2"

  character (len=$DBL_STRING_LENGTH), save :: f_compile_line = &
"$FCOMPILE1" //&
"$FCOMPILE2"

  character (len=$DBL_STRING_LENGTH), save :: C_compile_line = &
"$CCOMPILE1" //&
"$CCOMPILE2"

  character (len=$DBL_STRING_LENGTH), save :: link_line = &
"$LINK1" //&
"$LINK2"


end module build_info_module

EOF



