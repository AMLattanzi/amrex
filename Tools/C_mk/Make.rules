
vpath %.f   . $(VPATH_LOCATIONS)
vpath %.fi  . $(VPATH_LOCATIONS)
vpath %.F   . $(VPATH_LOCATIONS)
vpath %.f90 . $(VPATH_LOCATIONS)
vpath %.F90 . $(VPATH_LOCATIONS)
vpath %.c   . $(VPATH_LOCATIONS)
vpath %.cpp . $(VPATH_LOCATIONS)
vpath %.h   . $(VPATH_LOCATIONS)
vpath %.H   . $(VPATH_LOCATIONS)

# Suppress display of executed commands.  Default verbose
ifdef VERBOSE
  ifeq ($(VERBOSE),OFF)
    SILENT = @
  else
    ifeq ($(VERBOSE),FALSE)
      SILENT = @
    endif
  endif
else
  SILENT =
endif

#
# Rules for building executable.
#
$(executable):	$(objForExecs)
	@echo Linking $@ ...
	$(SILENT) $(PRELINK) $(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LDFLAGS) \
		-o $@ $^ $(libraries)
#	@echo SUCCESS

clean::
	@echo Cleaning...
	$(SILENT) $(RM) $(objTempDir)/*.o $(f77TempDir)/*.f $(f77TempDir)/*.f90 $(objEXETempDir)/*.o
	$(SILENT) $(RM) $(optionsLib) $(objTempDir)/*.o $(f77TempDir)/*.f $(f77TempDir)/*.f90 $(objEXETempDir)/*.o
	$(SILENT) $(RM) *.optrpt $(objTempDir)/*.optrpt $(objEXETempDir)/*.optrpt
	$(SILENT) $(RM) $(executable) *.pure

realclean:: clean
	@echo Cleaning ...
	$(SILENT) $(RM) lib*.a  TAGS tags BROWSE
	$(SILENT) $(RM) -r d o f ii_files *~
	$(SILENT) $(RM) *.ex *.ii *.o mon.out gmon.out
	$(SILENT) $(RM) *.mod
	$(SILENT) $(RM) work.pc work.pcl

file_locations:
	$(BOXLIB_HOME)/Tools/F_scripts/find_files_vpath.py --vpath "$(VPATH_LOCATIONS)" --files "$(CEXE_sources) $(FEXE_sources) $(cEXE_sources) $(fEXE_sources) $(f90EXE_sources) $(F90EXE_sources)"


tags:	$(allSources)
	@echo ctags ...
	$(SILENT) ctags $<

TAGS:	$(allSources)
	@echo etags $< ...
	$(SILENT) etags $(abspath $^)

BROWSE:	$(T_headers) $(T_sources) $(CEXE_headers) $(CEXE_sources)
	@echo Browsing $< ...
	$(SILENT) browse $^

.PHONY:	all clean TAGS realclean tags BROWSE

#
# Rules for objects.
#
$(objEXETempDir)/%.o: %.cpp
	@echo Compiling $*.cpp ...
	@if [ ! -d $(objEXETempDir) ]; then mkdir -p $(objEXETempDir); fi
	$(SILENT) $(CCACHE) $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $(CXXEXEFLAGS) $< $(EXE_OUTPUT_OPTION)

$(objEXETempDir)/%.o: %.c
	@echo Compiling $*.c ...
	@if [ ! -d $(objEXETempDir) ]; then mkdir -p $(objEXETempDir); fi
	$(SILENT) $(CCACHE) $(CC) $(CFLAGS) $(CPPFLAGS) -c $(CEXEFLAGS) -DBL_LANG_C $< $(EXE_OUTPUT_OPTION)

$(objEXETempDir)/%.o: %.F
	@echo Compiling $*.F ...
	@if [ ! -d $(objEXETempDir) ]; then mkdir -p $(objEXETempDir); fi
	@if [ ! -d $(f77TempDir) ]; then mkdir -p $(f77TempDir); fi
	$(SILENT) $(FORT_CPP) -DBL_LANG_FORT $(CPPFLAGS) $< | $(FORTPREP) > $(f77TempDir)/$*.f
	$(SILENT) $(F90CACHE) $(FC) $(FFLAGS) $(fincludes) -c $(FEXEFLAGS) $(f77TempDir)/$*.f $(FORT_EXE_OUTPUT_OPTION)

$(objEXETempDir)/%.o: %.f90
	@echo Compiling $*.f90 ...
	@if [ ! -d $(objEXETempDir) ]; then mkdir -p $(objEXETempDir); fi
	$(SILENT) $(F90CACHE) $(F90) $(F90FLAGS) $(fFLAGS) $(fincludes) -c $(fEXEFLAGS) $< $(FORT_EXE_OUTPUT_OPTION)

$(objEXETempDir)/%.o: %.F90
	@echo Compiling $*.F90 ...
	@if [ ! -d $(objEXETempDir) ]; then mkdir -p $(objEXETempDir); fi
	$(SILENT) $(F90CACHE) $(F90) -DBL_LANG_FORT $(CPPFLAGS) $(F90FLAGS) $(fFLAGS) $(fincludes) -c $(fEXEFLAGS) $< $(FORT_EXE_OUTPUT_OPTION)

$(objEXETempDir)/%.o: %.f
	@echo Compiling $*.f ...
	@if [ ! -d $(objEXETempDir) ]; then mkdir -p $(objEXETempDir); fi
	$(SILENT) $(F90CACHE) $(fC) $(fFLAGS) $(fincludes) -c $(fEXEFLAGS) $< $(FORT_EXE_OUTPUT_OPTION)

#
# Rules for dependencies in bare object files.
#
$(depEXETempDir)/%.d: %.cpp
	@echo Depending $< ...
	@if [ ! -d $(depEXETempDir) ]; then mkdir -p $(depEXETempDir); fi
	@$(SHELL) -ec '$(MKDEP) $(includes) $< | \
		sed -e '\''s,^[^:]*\/,,'\'' | \
		sed -e '\''s,$*.o,$(objEXETempDir)/& $@,'\'' > $@'

$(depEXETempDir)/%.d: %.c
	@echo Depending $< ...
	@if [ ! -d $(depEXETempDir) ]; then mkdir -p $(depEXETempDir); fi
	@$(SHELL) -ec '$(MKDEP) $(includes) $< | \
		sed -e '\''s,^[^:]*\/,,'\'' | \
		sed -e '\''s,$*.o,$(objEXETempDir)/& $@,'\'' > $@'

$(depEXETempDir)/%.d: %.F
	@echo Depending $< ...
	@if [ ! -d $(depEXETempDir) ]; then mkdir -p $(depEXETempDir); fi
	@$(SHELL) -ec '$(MKDEP) -fortran $(fincludes) $< | \
		sed -e '\''s,^[^:]*\/,,'\'' | \
		sed -e '\''s,$*.o,$(objEXETempDir)/& $@,'\'' > $@'

$(depEXETempDir)/%.d: %.f
	@echo Depending $< ...
	@if [ ! -d $(depEXETempDir) ]; then mkdir -p $(depEXETempDir); fi
	@$(SHELL) -ec '$(MKDEP) -fortran $(fincludes) $< | \
		sed -e '\''s,^[^:]*\/,,'\'' | \
		sed -e '\''s,$*.o,$(objEXETempDir)/& $@,'\'' > $@'

$(depEXETempDir)/f90.depends: $(f90EXE_sources) $(F90EXE_sources) 
	@if [ ! -d $(depEXETempDir) ]; then mkdir -p $(depEXETempDir); fi
	@if [ ! -d $(f77TempDir) ]; then mkdir -p $(f77TempDir); fi
	@echo "Building f90/F90 dependency File ..."
	$(MODDEP) --prefix $(objEXETempDir) \
            --temp_dir $(f77TempDir) \
            --cpp "$(FORT_CPP)" \
            --defines "-DBL_LANG_FORT $(CPPFLAGS)" \
            --f90_preprocess "$(F90PREP)" $^ > $(depEXETempDir)/f90.depends 

#
# Now load/build the dependency files.
#
ifneq ($(MAKECMDGOALS),realclean)
ifneq ($(MAKECMDGOALS),clean)

ifdef CEXE_sources
-include $(CEXE_sources:%.cpp=$(depEXETempDir)/%.d)
endif
ifdef FEXE_sources
-include $(FEXE_sources:%.F=$(depEXETempDir)/%.d)
endif
ifdef fEXE_sources
-include $(fEXE_sources:%.f=$(depEXETempDir)/%.d)
endif
# should be F90 and f90...
ifdef f90EXE_sources
-include $(depEXETempDir)/f90.depends
endif
ifdef cEXE_sources
-include $(cEXE_sources:%.c=$(depEXETempDir)/%.d)
endif

endif
endif

#-----------------------------------------------------------------------------
# for debugging.  To see the value of a Makefile variable,
# e.g. Fmlocs, simply do "make echo-Fmlocs".  This will
# print out the value.
echo-%:
	@echo "$* is $($*)"

