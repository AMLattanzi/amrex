#
# $Id: Make.package,v 1.22 2001-07-19 20:02:46 lijewski Exp $
#

BOXLIB_BASE=EXE
ifeq ($(LBASE),box)
  BOXLIB_BASE=LIB
endif

#
# Utility classes.
#
C$(BOXLIB_BASE)_headers += BoxLib.H BLVERSION.H
C$(BOXLIB_BASE)_sources += BoxLib.cpp

C$(BOXLIB_BASE)_sources += ParmParse.cpp Utility.cpp aString.cpp
C$(BOXLIB_BASE)_headers += ParmParse.H Utility.H BLassert.H aString.H ArrayLim.H

C$(BOXLIB_BASE)_headers += REAL.H CONSTANTS.H SPACE.H SPACE_F.H

C$(BOXLIB_BASE)_sources += UseCount.cpp
C$(BOXLIB_BASE)_headers += UseCount.H

C$(BOXLIB_BASE)_sources += DistributionMapping.cpp ParallelDescriptor.cpp
C$(BOXLIB_BASE)_headers += DistributionMapping.H ParallelDescriptor.H

C$(BOXLIB_BASE)_sources += VisMF.cpp RunStats.cpp Arena.cpp BArena.cpp CArena.cpp
C$(BOXLIB_BASE)_headers += VisMF.H RunStats.H Arena.H BArena.H CArena.H

#C$(BOXLIB_BASE)_sources += BLProfiler.cpp
#C$(BOXLIB_BASE)_headers += Profiler.H


#
# Container classes.
#
T_headers += Array.H PArray.H List.H Pointers.H Tuple.H

#
# FAB I/O stuff.
#
C${BOXLIB_BASE}_headers += FabConv.H FPC.H
C${BOXLIB_BASE}_sources += FabConv.cpp FPC.cpp

#
# Index space.
#
C$(BOXLIB_BASE)_sources += Box.cpp IntVect.cpp IndexType.cpp Orientation.cpp
C$(BOXLIB_BASE)_headers += Box.H IntVect.H IndexType.H Orientation.H

#
# Unions of rectangles.
#
C$(BOXLIB_BASE)_sources += BoxList.cpp BoxArray.cpp BoxDomain.cpp
C$(BOXLIB_BASE)_headers += BoxList.H BoxArray.H BoxDomain.H

#
# FORTRAN array data.
#
C$(BOXLIB_BASE)_sources += FArrayBox.cpp
C$(BOXLIB_BASE)_headers += FArrayBox.H

C$(BOXLIB_BASE)_headers += Looping.H

T_headers += BaseFab.H ArithFab.H NormedFab.H OrderedFab.H

#
# FORTRAN data defined on unions of rectangles.
#
C$(BOXLIB_BASE)_sources += MultiFab.cpp
C$(BOXLIB_BASE)_headers += MultiFab.H

T_headers += FabArray.H

T_headers += ccse-mpi.H
