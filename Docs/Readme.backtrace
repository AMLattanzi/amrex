BoxLib's backtracer can be used to catch segfault.  But it may only
work with GCC on a unix system. 

To use BoxLib's backtracer, compile the code with BL_BACKTRACE=TRUE in
command line or your GNUmakefile.  There are two types of backtracing.

The first type is at the function level.  You don't have to do
anything other than compiling the code with BL_BACKTRACE=TRUE.  If a
segfault occurs, the names of last 10 functions in the call stack will
be printed.

The second type can have finer granularity.  But you must instrument
your code.  For example,

#include <BLBackTrace.H>

void f()
{
    BL_BACKTRACE_PUSH("f()");

    // ...

    BL_BACKTRACE_PUSH("Place A");

    // ...

    BL_BACKTRACE_PUSH("Place B");

    // ...

    {
    	BL_BACKTRACE_PUSH("Place C");

	// ... 

	// Implicit POP of "Place C" at the end of scope.
    }

    // Explicit POP will pop the top of the stack: "Place B".
    BL_BACKTRACE_POP(); 

    int m[10] = {0};
    // Backtracing is thread-safe. 
    #pragma omp parallel for
    for (int i=0; i<10; i++) {
	std::string s;
	{
	    std::ostringstream ss;
	    ss << "Loop # " << i;
	    s = ss.str();  // Backtracer takes a string.
	}
	if (omp_get_thread_num() == 0) {
            BL_BACKTRACE_PUSH(s+", i-1000000 bug"); 
	    m[i-1000000] = i;
        } else {
            BL_BACKTRACE_PUSH(s+", i*1000000 bug"); 
	    m[i*1000000] = i;
        }
	std::cout << m[i] << std::endl;
    }

    // ... 

    // Implicit POP of "Message A" and "f()".
}

There are bugs in the above code.  If segfaults happen, the output
might look like,

== BACKTRACE == Proc. 1, Thread 0: "Loop # 0, i-1000000 bug", Line 175, File ../../Source/Castro_advance.cpp
== BACKTRACE == Proc. 1, Master Thread: "Place A", Line 102, File ../../Source/Castro_advance.cpp
== BACKTRACE == Proc. 1, Master Thread: "f()", Line 94, File ../../Source/Castro_advance.cpp

== BACKTRACE == Proc. 1, Thread 1: "Loop # 5, i*1000000 bug", Line 178, File ../../Source/Castro_advance.cpp
== BACKTRACE == Proc. 1, Master Thread: "Place A", Line 102, File ../../Source/Castro_advance.cpp
== BACKTRACE == Proc. 1, Master Thread: "f()", Line 94, File ../../Source/Castro_advance.cpp

Here "Master Thread" means it is outside OpenMP parallel region.  Note
that both "Message B" and "Message C" do not appear. 



**********************************************************************

Known Issues:

* When segfault occur on multiple MPI processes, the outputs can be
  out of order.

* On Edison at NERSC, the function names in the first type of tracing
  are missing because the executable is statically linked.
